<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hft,</title>
  <link href="http://scarcecapital.com/hft/tags/design/index.xml" rel="self" />
  <link href="http://scarcecapital.com/hft/tags/design"/>
  <updated>2013-04-23T19:03:34Z</updated>
  <id>http://scarcecapital.com/hft/tags/design/index.xml</id>
  <entry>
        <title type="html">Candidate Structure</title>
        <author><name>Tony Day</name></author>
        <link href="http://scarcecapital.com/hft/blog/candidate-structure.html"/>
        <updated>2013-04-11T16:46:00Z</updated>
        <published>2013-04-11T16:46:00Z</published>
        <id>http://scarcecapital.com/hft/blog/candidate-structure.html</id>
        <category scheme="http://scarcecapital.com/hft/tags/design.html" term="design" label="design"/>
        <content type="html">&lt;p&gt;
hft is in an experimental phase and, as such, there is a need for flexibility
in the top-down design of the system. To achieve this, the overall design is
first being modelled using graphviz.  The current candidate system looks like this:
&lt;/p&gt;

&lt;img class="hero-chart" src="&lt;lisp&gt;(ob:path-to-root)&lt;/lisp&gt;/&lt;lisp&gt;(ob:blog-assets-dir BLOG)&lt;/lisp&gt;/candidate.svg" alt="design" width="100%"&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;blue boxes represent individual components of the system
&lt;/li&gt;
&lt;li&gt;other colors represent external systems and data sources
&lt;/li&gt;
&lt;li&gt;each edge of the chart represents a messaging sytem requirement
&lt;/li&gt;
&lt;li&gt;there are two main one-way message passing routines that probably
need to be very very fast (blue lines)
&lt;/li&gt;
&lt;li&gt;there is one read from database and one write to database (red lines)
&lt;/li&gt;
&lt;li&gt;every component registers to an observer component that records system
state and dynamics (grey dotted).
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
The components have been grouped into several clusters:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;market data: representing trade data, order book and news information
flowing from outside the sytem to a local data node.
&lt;/li&gt;
&lt;li&gt;broker data: representing communication with trading mechanisms
&lt;/li&gt;
&lt;li&gt;onwire: components that are "in the event stream".  This is motivated by
the specifications and documentation of the disruptor which argues that a
single thread "wheel" is the best way to enable fast processing of market
data into trading orders.
&lt;/li&gt;
&lt;li&gt;offwire: this represents algorithms and processing that are not on the
single-thread process.  The motivation here is to test the hypothesis in
the disruptor argument.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
There are several ideas that are being tested:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;that the entire system should be the subject of search and optimisation,
rather than componentry.  One example of this is separation of complex
event definitions from the statistical analysis once events are defined.
&lt;/li&gt;
&lt;li&gt;there is a focus on automation and machine learning.  As such there is no
place for human interaction.  In particular, no visualization is required.
&lt;/li&gt;
&lt;li&gt;messaging between components can be the same general process.  The
components can also be tested in exactly the same way (such as speed and
robustness testing)
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
And here's the dot code:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-dot"&gt;digraph &lt;span style="color: #8cd0d3;"&gt;G&lt;/span&gt; {
        node [&lt;span style="color: #dfaf8f;"&gt;label=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"\N"&lt;/span&gt;];
        node [&lt;span style="color: #dfaf8f;"&gt;style=&lt;/span&gt;&lt;span style="color: #b9a16c;"&gt;filled&lt;/span&gt;, &lt;span style="color: #dfaf8f;"&gt;color=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"#1f3950"&lt;/span&gt;,&lt;span style="color: #dfaf8f;"&gt;fontcolor=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"#eeeeee"&lt;/span&gt;,&lt;span style="color: #dfaf8f;"&gt;shape=&lt;/span&gt;&lt;span style="color: #b9a16c;"&gt;box&lt;/span&gt;];
        subgraph &lt;span style="color: #8cd0d3;"&gt;cluster&lt;/span&gt;_market_data {
                graph [&lt;span style="color: #dfaf8f;"&gt;label=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"market data"&lt;/span&gt;, &lt;span style="color: #dfaf8f;"&gt;color=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"#909090"&lt;/span&gt;];
                exchange [&lt;span style="color: #dfaf8f;"&gt;shape=&lt;/span&gt;&lt;span style="color: #b9a16c;"&gt;egg&lt;/span&gt;,&lt;span style="color: #dfaf8f;"&gt;color=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"#ff111111"&lt;/span&gt;,&lt;span style="color: #dfaf8f;"&gt;fontcolor=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"#101010"&lt;/span&gt;,&lt;span style="color: #dfaf8f;"&gt;label=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"exchanges"&lt;/span&gt;];
                aggregator [&lt;span style="color: #dfaf8f;"&gt;shape=&lt;/span&gt;&lt;span style="color: #b9a16c;"&gt;egg&lt;/span&gt;,&lt;span style="color: #dfaf8f;"&gt;color=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"#cc11cc22"&lt;/span&gt;,&lt;span style="color: #dfaf8f;"&gt;fontcolor=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"#101010"&lt;/span&gt;,&lt;span style="color: #dfaf8f;"&gt;label=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"data stream"&lt;/span&gt;];
                localport [&lt;span style="color: #dfaf8f;"&gt;label=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"local node"&lt;/span&gt;];
                exchange -&amp;gt; aggregator [&lt;span style="color: #dfaf8f;"&gt;dir=&lt;/span&gt;&lt;span style="color: #b9a16c;"&gt;none&lt;/span&gt;];
                aggregator -&amp;gt; localport [&lt;span style="color: #dfaf8f;"&gt;dir=&lt;/span&gt;&lt;span style="color: #b9a16c;"&gt;both&lt;/span&gt;];
        }
        subgraph &lt;span style="color: #8cd0d3;"&gt;cluster&lt;/span&gt;_offwire {
                graph [&lt;span style="color: #dfaf8f;"&gt;label=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"offwire"&lt;/span&gt;,
                        &lt;span style="color: #dfaf8f;"&gt;color=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"#909090"&lt;/span&gt;];
                offwirealgo [&lt;span style="color: #dfaf8f;"&gt;label=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"offline algo"&lt;/span&gt;];
                observer;
                databases;
                observer -&amp;gt; databases [&lt;span style="color: #dfaf8f;"&gt;color=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;red&lt;/span&gt;,&lt;span style="color: #dfaf8f;"&gt;label=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"write"&lt;/span&gt;,&lt;span style="color: #dfaf8f;"&gt;fontcolor=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;red&lt;/span&gt;];
        }
        subgraph &lt;span style="color: #8cd0d3;"&gt;cluster&lt;/span&gt;_onwire {
                graph [&lt;span style="color: #dfaf8f;"&gt;label=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"onwire"&lt;/span&gt;,
                        &lt;span style="color: #dfaf8f;"&gt;color=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"#909090"&lt;/span&gt;];
                node [&lt;span style="color: #dfaf8f;"&gt;style=&lt;/span&gt;&lt;span style="color: #b9a16c;"&gt;filled&lt;/span&gt;];
                disruptor [&lt;span style="color: #dfaf8f;"&gt;label=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"event server"&lt;/span&gt;];
                eventalgo [&lt;span style="color: #dfaf8f;"&gt;label=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"algo"&lt;/span&gt;];
                controller;
                controller -&amp;gt; eventalgo [&lt;span style="color: #dfaf8f;"&gt;color=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"#aaaaaa"&lt;/span&gt;,&lt;span style="color: #dfaf8f;"&gt;dir=&lt;/span&gt;&lt;span style="color: #b9a16c;"&gt;both&lt;/span&gt;]
                disruptor -&amp;gt; listener;
                disruptor -&amp;gt; eventalgo;
                disruptor -&amp;gt; controller;
                controller -&amp;gt; disruptor [&lt;span style="color: #dfaf8f;"&gt;color=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"#0080ff"&lt;/span&gt;];
        }
        subgraph &lt;span style="color: #8cd0d3;"&gt;cluster&lt;/span&gt;_broker {
                graph [&lt;span style="color: #dfaf8f;"&gt;label=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"broker data"&lt;/span&gt;,
                        &lt;span style="color: #dfaf8f;"&gt;color=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"#909090"&lt;/span&gt;];
                broker [&lt;span style="color: #dfaf8f;"&gt;shape=&lt;/span&gt;&lt;span style="color: #b9a16c;"&gt;egg&lt;/span&gt;,&lt;span style="color: #dfaf8f;"&gt;color=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"#ff111111"&lt;/span&gt;,&lt;span style="color: #dfaf8f;"&gt;fontcolor=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"#101010"&lt;/span&gt;,&lt;span style="color: #dfaf8f;"&gt;label=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"brokers"&lt;/span&gt;];
                brokeraggregator [&lt;span style="color: #dfaf8f;"&gt;shape=&lt;/span&gt;&lt;span style="color: #b9a16c;"&gt;egg&lt;/span&gt;,&lt;span style="color: #dfaf8f;"&gt;color=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"#cc11cc22"&lt;/span&gt;,&lt;span style="color: #dfaf8f;"&gt;fontcolor=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"#101010"&lt;/span&gt;,&lt;span style="color: #dfaf8f;"&gt;label=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"aggregation"&lt;/span&gt;];
                broker -&amp;gt; brokeraggregator [&lt;span style="color: #dfaf8f;"&gt;dir=&lt;/span&gt;&lt;span style="color: #b9a16c;"&gt;none&lt;/span&gt;];
                brokeraggregator -&amp;gt; trader [&lt;span style="color: #dfaf8f;"&gt;dir=&lt;/span&gt;&lt;span style="color: #b9a16c;"&gt;both&lt;/span&gt;];
        }
        localport -&amp;gt; observer [&lt;span style="color: #dfaf8f;"&gt;color=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"#aaaaaa"&lt;/span&gt;,&lt;span style="color: #dfaf8f;"&gt;style=&lt;/span&gt;&lt;span style="color: #b9a16c;"&gt;dotted&lt;/span&gt;];
        controller -&amp;gt; localport [&lt;span style="color: #dfaf8f;"&gt;color=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"#aaaaaa"&lt;/span&gt;];
        localport -&amp;gt; disruptor [&lt;span style="color: #dfaf8f;"&gt;color=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"#0080ff"&lt;/span&gt;];
        listener -&amp;gt; observer [&lt;span style="color: #dfaf8f;"&gt;color=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"#aaaaaa"&lt;/span&gt;,&lt;span style="color: #dfaf8f;"&gt;style=&lt;/span&gt;&lt;span style="color: #b9a16c;"&gt;dotted&lt;/span&gt;];
        controller -&amp;gt; observer [&lt;span style="color: #dfaf8f;"&gt;color=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"#aaaaaa"&lt;/span&gt;,&lt;span style="color: #dfaf8f;"&gt;style=&lt;/span&gt;&lt;span style="color: #b9a16c;"&gt;dotted&lt;/span&gt;];
        controller -&amp;gt; trader [&lt;span style="color: #dfaf8f;"&gt;color=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"#aaaaaa"&lt;/span&gt;,&lt;span style="color: #dfaf8f;"&gt;dir=&lt;/span&gt;&lt;span style="color: #b9a16c;"&gt;both&lt;/span&gt;];
        controller -&amp;gt; offwirealgo [&lt;span style="color: #dfaf8f;"&gt;color=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"#aaaaaa"&lt;/span&gt;,&lt;span style="color: #dfaf8f;"&gt;dir=&lt;/span&gt;&lt;span style="color: #b9a16c;"&gt;both&lt;/span&gt;];
        databases -&amp;gt; offwirealgo [&lt;span style="color: #dfaf8f;"&gt;color=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;red&lt;/span&gt;,&lt;span style="color: #dfaf8f;"&gt;label=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"read"&lt;/span&gt;,&lt;span style="color: #dfaf8f;"&gt;fontcolor=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;red&lt;/span&gt;];
        trader -&amp;gt; observer [&lt;span style="color: #dfaf8f;"&gt;color=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"#aaaaaa"&lt;/span&gt;,&lt;span style="color: #dfaf8f;"&gt;style=&lt;/span&gt;&lt;span style="color: #b9a16c;"&gt;dotted&lt;/span&gt;];
        eventalgo -&amp;gt; observer [&lt;span style="color: #dfaf8f;"&gt;color=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"#aaaaaa"&lt;/span&gt;,&lt;span style="color: #dfaf8f;"&gt;style=&lt;/span&gt;&lt;span style="color: #b9a16c;"&gt;dotted&lt;/span&gt;];
        offwirealgo -&amp;gt; observer [&lt;span style="color: #dfaf8f;"&gt;color=&lt;/span&gt;&lt;span style="color: #cc9393;"&gt;"#aaaaaa"&lt;/span&gt;,&lt;span style="color: #dfaf8f;"&gt;style=&lt;/span&gt;&lt;span style="color: #b9a16c;"&gt;dotted&lt;/span&gt;];
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;haskell interaction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;

&lt;p&gt;
Via haskell, the dot chart can be the specifications for an actual system as well as a
representation. And via svg technology, the picture can also be modified to
be a reporting front-end in a production environment.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-haskell"&gt;&lt;span style="color: #f0dfaf; font-weight: bold;"&gt;module&lt;/span&gt; &lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;ControllerTest&lt;/span&gt;
( importDotFile
, importDot
, printGraph
, nodeList
, edgeList
) &lt;span style="color: #f0dfaf; font-weight: bold;"&gt;where&lt;/span&gt;

&lt;span style="color: #f0dfaf; font-weight: bold;"&gt;import&lt;/span&gt; &lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;Data.GraphViz&lt;/span&gt;
&lt;span style="color: #f0dfaf; font-weight: bold;"&gt;import&lt;/span&gt; &lt;span style="color: #f0dfaf; font-weight: bold;"&gt;qualified&lt;/span&gt; &lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;Data.Text.Lazy&lt;/span&gt; &lt;span style="color: #f0dfaf; font-weight: bold;"&gt;as&lt;/span&gt; &lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;L&lt;/span&gt;
&lt;span style="color: #f0dfaf; font-weight: bold;"&gt;import&lt;/span&gt; &lt;span style="color: #f0dfaf; font-weight: bold;"&gt;qualified&lt;/span&gt; &lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;Data.Text.Lazy.IO&lt;/span&gt; &lt;span style="color: #f0dfaf; font-weight: bold;"&gt;as&lt;/span&gt; &lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;I&lt;/span&gt;
&lt;span style="color: #f0dfaf; font-weight: bold;"&gt;import&lt;/span&gt; &lt;span style="color: #f0dfaf; font-weight: bold;"&gt;qualified&lt;/span&gt; &lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;Data.GraphViz.Types.Generalised&lt;/span&gt; &lt;span style="color: #f0dfaf; font-weight: bold;"&gt;as&lt;/span&gt; &lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;G&lt;/span&gt;
&lt;span style="color: #f0dfaf; font-weight: bold;"&gt;import&lt;/span&gt; &lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;Data.Graph.Inductive.Graph&lt;/span&gt;

&lt;span style="color: #8cd0d3;"&gt;importDotFile&lt;/span&gt; &lt;span style="color: #dfaf8f;"&gt;::&lt;/span&gt; &lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;FilePath&lt;/span&gt; &lt;span style="color: #dfaf8f;"&gt;-&amp;gt;&lt;/span&gt; &lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;IO&lt;/span&gt; (&lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;G.DotGraph&lt;/span&gt; &lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;String&lt;/span&gt;)
&lt;span style="color: #8cd0d3;"&gt;importDotFile&lt;/span&gt; f &lt;span style="color: #dfaf8f;"&gt;=&lt;/span&gt; &lt;span style="color: #f0dfaf; font-weight: bold;"&gt;do&lt;/span&gt;
        dotText &lt;span style="color: #dfaf8f;"&gt;&amp;lt;-&lt;/span&gt; &lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;I&lt;/span&gt;&lt;span style="color: #dfaf8f;"&gt;.&lt;/span&gt;readFile f
        return &lt;span style="color: #dfaf8f;"&gt;$&lt;/span&gt; parseDotGraph dotText

&lt;span style="color: #8cd0d3;"&gt;importDot&lt;/span&gt; &lt;span style="color: #dfaf8f;"&gt;::&lt;/span&gt; &lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;L.Text&lt;/span&gt; &lt;span style="color: #dfaf8f;"&gt;-&amp;gt;&lt;/span&gt; &lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;G.DotGraph&lt;/span&gt; &lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;Node&lt;/span&gt;
&lt;span style="color: #8cd0d3;"&gt;importDot&lt;/span&gt; s &lt;span style="color: #dfaf8f;"&gt;=&lt;/span&gt; parseDotGraph s

&lt;span style="color: #8cd0d3;"&gt;printGraph&lt;/span&gt; &lt;span style="color: #dfaf8f;"&gt;::&lt;/span&gt; &lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;G.DotGraph&lt;/span&gt; &lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;String&lt;/span&gt; &lt;span style="color: #dfaf8f;"&gt;-&amp;gt;&lt;/span&gt; &lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;IO&lt;/span&gt; &lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;()&lt;/span&gt;
&lt;span style="color: #8cd0d3;"&gt;printGraph&lt;/span&gt; d &lt;span style="color: #dfaf8f;"&gt;=&lt;/span&gt; &lt;span style="color: #f0dfaf; font-weight: bold;"&gt;do&lt;/span&gt;
        putStrLn &lt;span style="color: #dfaf8f;"&gt;$&lt;/span&gt; &lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;L&lt;/span&gt;&lt;span style="color: #dfaf8f;"&gt;.&lt;/span&gt;unpack &lt;span style="color: #dfaf8f;"&gt;$&lt;/span&gt; printDotGraph d
        return&lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;()&lt;/span&gt;

&lt;span style="color: #8cd0d3;"&gt;nodeList&lt;/span&gt; &lt;span style="color: #dfaf8f;"&gt;::&lt;/span&gt; &lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;G.DotGraph&lt;/span&gt; &lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;String&lt;/span&gt; &lt;span style="color: #dfaf8f;"&gt;-&amp;gt;&lt;/span&gt; [&lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;String&lt;/span&gt;]
&lt;span style="color: #8cd0d3;"&gt;nodeList&lt;/span&gt; g &lt;span style="color: #dfaf8f;"&gt;=&lt;/span&gt; map nodeID &lt;span style="color: #dfaf8f;"&gt;$&lt;/span&gt; graphNodes g

&lt;span style="color: #8cd0d3;"&gt;edgeList&lt;/span&gt; &lt;span style="color: #dfaf8f;"&gt;::&lt;/span&gt; &lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;G.DotGraph&lt;/span&gt; &lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;String&lt;/span&gt; &lt;span style="color: #dfaf8f;"&gt;-&amp;gt;&lt;/span&gt; [(&lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;String&lt;/span&gt;,&lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;String&lt;/span&gt;)]
&lt;span style="color: #8cd0d3;"&gt;edgeList&lt;/span&gt; g &lt;span style="color: #dfaf8f;"&gt;=&lt;/span&gt;  map (&lt;span style="color: #dfaf8f;"&gt;\&lt;/span&gt;x &lt;span style="color: #dfaf8f;"&gt;-&amp;gt;&lt;/span&gt; (fromNode x, toNode x)) &lt;span style="color: #dfaf8f;"&gt;$&lt;/span&gt; graphEdges g
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
So, a new picture generates a new system with potentially new components
(nodes) and messaging requirements (edges).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;edges&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-haskell"&gt;&lt;span style="color: #f0dfaf; font-weight: bold;"&gt;import&lt;/span&gt; &lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;ControllerTest&lt;/span&gt;
g &lt;span style="color: #dfaf8f;"&gt;&amp;lt;-&lt;/span&gt; importDotFile &lt;span style="color: #cc9393;"&gt;"../candidate.dot"&lt;/span&gt;
&lt;span style="color: #8cd0d3;"&gt;edgeList&lt;/span&gt; g
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="left"/&gt;

&lt;col class="left"/&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;exchange&lt;/td&gt;
&lt;td class="left"&gt;aggregator&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;aggregator&lt;/td&gt;
&lt;td class="left"&gt;localport&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;observer&lt;/td&gt;
&lt;td class="left"&gt;databases&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;controller&lt;/td&gt;
&lt;td class="left"&gt;eventalgo&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;disruptor&lt;/td&gt;
&lt;td class="left"&gt;listener&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;disruptor&lt;/td&gt;
&lt;td class="left"&gt;eventalgo&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;disruptor&lt;/td&gt;
&lt;td class="left"&gt;controller&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;controller&lt;/td&gt;
&lt;td class="left"&gt;disruptor&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;broker&lt;/td&gt;
&lt;td class="left"&gt;brokeraggregator&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;brokeraggregator&lt;/td&gt;
&lt;td class="left"&gt;trader&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;localport&lt;/td&gt;
&lt;td class="left"&gt;observer&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;controller&lt;/td&gt;
&lt;td class="left"&gt;localport&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;localport&lt;/td&gt;
&lt;td class="left"&gt;disruptor&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;listener&lt;/td&gt;
&lt;td class="left"&gt;observer&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;controller&lt;/td&gt;
&lt;td class="left"&gt;observer&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;controller&lt;/td&gt;
&lt;td class="left"&gt;trader&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;controller&lt;/td&gt;
&lt;td class="left"&gt;offwirealgo&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;databases&lt;/td&gt;
&lt;td class="left"&gt;offwirealgo&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;trader&lt;/td&gt;
&lt;td class="left"&gt;observer&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;eventalgo&lt;/td&gt;
&lt;td class="left"&gt;observer&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;offwirealgo&lt;/td&gt;
&lt;td class="left"&gt;observer&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;nodes&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-haskell"&gt;&lt;span style="color: #f0dfaf; font-weight: bold;"&gt;import&lt;/span&gt; &lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;ControllerTest&lt;/span&gt;
&lt;span style="color: #f0dfaf; font-weight: bold;"&gt;import&lt;/span&gt; &lt;span style="color: #8cd0d3; background-color: #3f3f3f;"&gt;Data.List&lt;/span&gt;
g &lt;span style="color: #dfaf8f;"&gt;&amp;lt;-&lt;/span&gt; importDotFile &lt;span style="color: #cc9393;"&gt;"../dot/candidate.dot"&lt;/span&gt;
&lt;span style="color: #8cd0d3;"&gt;map&lt;/span&gt; (&lt;span style="color: #dfaf8f;"&gt;\&lt;/span&gt;x &lt;span style="color: #dfaf8f;"&gt;-&amp;gt;&lt;/span&gt; [x]) &lt;span style="color: #dfaf8f;"&gt;$&lt;/span&gt; nodeList g
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="left"/&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;aggregator&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;broker&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;brokeraggregator&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;controller&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;databases&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;disruptor&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;eventalgo&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;exchange&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;listener&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;localport&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;observer&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;offwirealgo&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;trader&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
        </entry>
        
</feed>
